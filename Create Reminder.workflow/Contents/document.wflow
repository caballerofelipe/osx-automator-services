<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>417</string>
	<key>AMApplicationVersion</key>
	<string>2.6</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run JavaScript.action</string>
				<key>ActionName</key>
				<string>Run JavaScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>// *******************
// Configuration
// *******************
// Weekdays
var weekDays = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]; // Used to display the date only
// Main reminder's dialog
var titleMain = 'Reminder';
var messageMain = 'Reminder\'s title.';
var messageMainNoEmptyText = messageMain + '\nA title must be provided.'; 			// Shown only if the text the user entered is empty
// Buttons
var buttonCancelTxt = 'Cancel';
var buttonSpecifyDateTxt = 'Specify date';
var buttonOKTxt = 'Ok';
var buttonShowReminderTxt = 'Show reminder';
// Data dialog
var titleDateDialog = 'Reminder\'s date';
var messageDateDialog = 'Today is ' + weekDays[new Date().getDay()] + ' ' + new Date().getFullYear() + '-' + twoDigits(new Date().getMonth()+1) + '-' + twoDigits(new Date().getDate());
messageDateDialog += '\n\nPosible Formats:';
messageDateDialog += '\n\t* (no date but continue)';
messageDateDialog += '\n\tDay [time]: (ex: Tue 12:00 or Mon)';
messageDateDialog += '\n\tFull format: [[[[yyyy-]mm-]dd ]hh:]mm';
messageDateDialog += '\n\tAdd/substract units: (ex: +10m or';
messageDateDialog += '\n\t\t+1y+1mo+1d+1h+1m [(hh:mm)])';
// List selection dialog
var titleListDialog = 'List';
var messageListDialog = 'Reminder\'s list.';
// Final Dialog
var titleSuccess = 'Reminder created successfully!';
var messageSuccess = 'Reminder created successfully!';
// Default date
var defaultTime = '9:00';
var defaultDateString = 'Fri ' + defaultTime;
/*
// Default date yyyy-mm-dd hh:mm from now
var nowDate = new Date()
var reminderDefaultDate = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDay());
reminderDefaultDate.setDate(nowDate.getDate() + 1); // Tomorrow
reminderDefaultDate.setHours(defaultTime); 
var defaultDateString =
	reminderDefaultDate.getFullYear()
		+ '-' + twoDigits(reminderDefaultDate.getMonth() + 1)
		+ '-' + twoDigits(reminderDefaultDate.getDate())
		+ ' ' + twoDigits(reminderDefaultDate.getHours())
		+ ':' + twoDigits(reminderDefaultDate.getMinutes());
*/

// *******************
// Functions
// *******************
function twoDigits(number) {
	// http://stackoverflow.com/a/8043061/1071459
	return ('0' + number).slice(-2);
}
function dateFromString(dateString) {
	var time = defaultTime &amp;&amp; /^\d?\d:\d\d$/.test(defaultTime)? defaultTime: '9:00';
	var now = new Date();
	switch (true) {
		/*
		* Date yyyy-mm-dd hh:mm
		*/
		case /^(((((((((\d\d\d\d)-)?\d?\d)-)?\d?\d) )?\d?\d):)?(\d?\d))$/.test(dateString):
			var minutes = Number(/\d?\d$/.exec(dateString)? /\d?\d$/.exec(dateString)[0]: now.getMinutes());
			dateString = dateString.replace(/\d?\d$/, '');
			var hours = Number(/\d?\d(?=:$)/.exec(dateString)? /\d?\d(?=:$)/.exec(dateString)[0]: now.getHours());
			dateString = dateString.replace(/(\d?\d):$/, '');
			var dayOfMonth = Number(/\d?\d(?= $)/.exec(dateString)? /\d?\d(?= $)/.exec(dateString)[0]: now.getDate());
			dateString = dateString.replace(/\d?\d $/, '');
			var month = Number(/\d?\d(?=-$)/.exec(dateString)? /\d?\d(?=-$)/.exec(dateString)[0] * 1 - 1: now.getMonth());
			dateString = dateString.replace(/\d?\d-$/, '');
			var year = Number(/\d\d\d\d(?=-$)/.exec(dateString)? /\d\d\d\d(?=-$)/.exec(dateString)[0]: now.getFullYear());
			return new Date(year, month, dayOfMonth, hours, minutes + now.getTimezoneOffset());
			break;
		/*
		* Next day by name and optionally time
		* mon or monday
		* tue or tuesday
		* wed or wednesday
		* thu or thursday
		* sat or saturday
		* sun or sunday
		*/	
		case /^(mon(day)?|tue(sday)?|wed(nesday)?|thu(rsday)?|fri(day)?|sat(urday)?|sun(day)?)( *\d?\d:\d?\d)?$/i.test(dateString):
			dateString = dateString.toLowerCase();
			var minutes;
			var hours;
			var dayOfMonth = now.getDate();
			var month = now.getMonth();
			var year = now.getFullYear();
			var dayOfWeekName = /^(mon(day)?|tue(sday)?|wed(nesday)?|thu(rsday)?|fri(day)?|sat(urday)?|sun(day)?)/.exec(dateString)[0];
			dateString = dateString.replace(/^(mon(day)?|tue(sday)?|wed(nesday)?|thu(rsday)?|fri(day)?|sat(urday)?|sun(day)?) */, '');
			if(dateString.length &gt; 0){
				hours = Number(/^\d?\d/.exec(dateString)[0]);
				minutes = Number(/\d?\d$/.exec(dateString)[0]);
			} else {
				hours = Number(/^\d?\d/.exec(time)[0]);
				minutes = Number(/\d?\d$/.exec(time)[0]);
			}
			var dayOfWeek = null;
			switch(dayOfWeekName){
				case 'sun':
				case 'sunday':
					dayOfWeek = 0;
					break;
				case 'mon':
				case 'monday':
					dayOfWeek = 1;
					break;
				case 'tue':
				case 'tuesday':
					dayOfWeek = 2;
					break;
				case 'wed':
				case 'wednesday':
					dayOfWeek = 3;
					break;
				case 'thu':
				case 'thursday':
					dayOfWeek = 4;
					break;
				case 'fri':
				case 'friday':
					dayOfWeek = 5;
					break;
				case 'sat':
				case 'saturday':
					dayOfWeek = 6;
					break;
			}
			var addDays = dayOfWeek - now.getDay() &lt;= 0? 7 + (dayOfWeek - now.getDay()): dayOfWeek - now.getDay();
			return new Date(year, month, dayOfMonth + addDays, hours, minutes + now.getTimezoneOffset());
			break;
		/*
		* Add time to now's datetime
		*/
		case /^( *(\+|-)\d+(y|mo|d|h|m))* *(\(\d?\d:\d?\d\))?$/.test(dateString):
			var hours = Number(/^\d?\d/.exec(time)[0]); // Default hours
			var minutes = Number(/\d\d$/.exec(time)[0]); // Default minutes
			var useNonDefaultTime = false; // True if hours or minutes should be added to a time - instead of the default hh:mm
			if(/ *\(?\d?\d:\d?\d\)$/.exec(dateString)){
				minutes = Number(/\d?\d(?=\)$)/.exec(dateString)[0]);
				hours = Number(/\d?\d(?=:)/.exec(dateString)[0]);
				dateString = dateString.replace(/ *\(\d?\d:\d?\d\)$/, '');
				useNonDefaultTime = true;
			}
			var dayOfMonth = now.getDate();
			var month = now.getMonth();
			var year = now.getFullYear();
			var match, unit, q, sign, dif;
			while(dateString.length &gt; 0){
				match = /^( *(\+|-)\d+(y|mo|d|h|m))/.exec(dateString)[0];
				dateString = dateString.replace(/^( *(\+|-)\d+(y|mo|d|h|m))/, '');
				sign = /(\+|-)/.exec(match)[0];
				q = Number(/\d+/.exec(match)[0]);
				unit = /(y|mo|d|h|m)/.exec(match)[0];
				if(sign == '+'){
					dif = q;					
				} else {
					dif = -q;
				}
				switch(unit){
					case 'y':
						year += dif;
						break;
					case 'mo':
						month += dif;
						break;
					case 'd':
						dayOfMonth += dif;
						break;
					case 'h':
						if(!useNonDefaultTime){
							hours = now.getHours();
							minutes = now.getMinutes();
							useNonDefaultTime = true;
						}
						hours = hours + dif;
						break;
					case 'm':
						if(!useNonDefaultTime){
							hours = now.getHours();
							minutes = now.getMinutes();
							useNonDefaultTime = true;
						}
						minutes = minutes + dif;
						break;
				}
			}
			return new Date(year, month, dayOfMonth, hours, minutes + now.getTimezoneOffset());
			break;
		default:
			return new Date(dateString);
			break;
	}
}

// *******************
// Execution
// *******************
function run(input, parameters) {
	try {
		var currentApp = Application.currentApplication();
		currentApp.includeStandardAdditions = true;
		Reminders = Application('Reminders');
		Reminders.includeStandardAdditions = true;

		var newDate = dateFromString(defaultDateString);
		var dialogResult = null;
		var reminder = {};
		var firstRun = true, messageTmp = '';
		// Reminder title
		do {
			messageTmp = firstRun? messageMain: messageMainNoEmptyText;
			dialogResult = currentApp.displayDialog( messageTmp, {
				withTitle: titleMain,
				defaultAnswer: '',
				buttons: [buttonCancelTxt, buttonSpecifyDateTxt, buttonOKTxt],
				defaultButton: buttonOKTxt,
				cancelButton: buttonCancelTxt});
			firstRun = false;
		} while(dialogResult.textReturned == '')
		reminder.name = dialogResult.textReturned;
		// Specify Date
		if(dialogResult.buttonReturned == buttonSpecifyDateTxt){
			var addDate = false;
			do{
				dialogResult = currentApp.displayDialog(messageDateDialog, {
					withTitle: titleDateDialog,
					defaultAnswer: defaultDateString,
					buttons: [buttonCancelTxt, buttonOKTxt],
					defaultButton: buttonOKTxt,
					cancelButton: buttonCancelTxt});
				if(dialogResult.textReturned == '*'){
					addDate = false;
				} else {
					newDate = dateFromString(dialogResult.textReturned);
					addDate = true;
				}
			} while(addDate &amp;&amp; newDate == 'Invalid Date')
			if(addDate){
				reminder.remindMeDate = newDate;
			}
		}
		// Specify list
		reminder.listName = currentApp.chooseFromList(Reminders.defaultAccount.lists.name(), {
			defaultItems: Reminders.defaultList.name(),
			withTitle: titleListDialog,
			withPrompt: messageListDialog,
			cancelButton: buttonCancelTxt
			})[0];
		if(reminder.listName == undefined){
			return false;
		}
		
		var T = Reminders.Reminder(reminder);
		if(reminder.listName &amp;&amp; reminder.listName != ''){
			Reminders.lists.whose({name: reminder.listName})[0].reminders.push(T)
		} else {
			Reminders.defaultList.reminders.push(T);
		}
		dialogResult = currentApp.displayDialog( messageSuccess, {
			withTitle: titleSuccess,
			buttons: [buttonShowReminderTxt, buttonOKTxt],
			defaultButton: buttonOKTxt});
		if(dialogResult.buttonReturned == buttonShowReminderTxt){
			T.show();
			Reminders.activate();
		}
		return true;

	} catch (e) {
		switch(e.errorNumber){
			case -128: // User canceled
				// Do nothing
				break;
			default:
				currentApp.displayAlert(e.message);
				break;
		}
	}
}</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunJavaScript</string>
				<key>CFBundleVersion</key>
				<string>1.0</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunJavaScriptAction</string>
				<key>InputUUID</key>
				<string>32152C44-9211-4546-B1C1-D152B759B229</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
					<string>JavaScript</string>
				</array>
				<key>OutputUUID</key>
				<string>0E52193D-FBA3-4832-973C-0ADB98EFA9AA</string>
				<key>UUID</key>
				<string>CB66F40C-8F3A-47F3-8649-44225E64938C</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>function run(input, parameters) {
	
	// Your script goes here

	return input;
}</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>529.000000:316.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run JavaScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
